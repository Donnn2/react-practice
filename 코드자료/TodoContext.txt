import React, { useReducer, createContext } from 'react';

const initialTodos = [
  {
    id: 1,
    text: '프로젝트 생성하기',
    done: false
  },
  {
    id: 2,
    text: '컴포넌트 스타일링하기',
    done: false
  },
  {
    id: 3,
    text: 'Context 만들기',
    done: false
  },
  {
    id: 4,
    text: '기능 구현하기',
    done: true
  }
];

const reducer = (state, action) =>{
  switch (action.type) {
    case 'CREATE':
      return state.concat(action.todo)
  
    case 'TOGGLE':
      return state.map(todo =>
        todo.id === action.id ? {...todo, done: !todo.done}: todo  //조건 ? t : f
      )

    
    case 'REMOVE':
      return state.filter(todo => todo.id !== action.id)


    default:
      throw new Error(`에러가 발생했습니다`)
      
  }
}

// 여기서부터 context 관련코드
// 1. Context 만들기 (createContext() 활용) - state와 dispatch를 독립적으로 사용하기 위해서 2개의 context를 생성
const TodoStateContext = createContext()
const TodoDispatchContext = createContext()

// 2. TodoProvider라는 리액트 컴포넌트를 만든다

const TodoProvider = ({children}) =>{
  //3. useReducer로 상태를만든다
  const[state, dispatch] = useReducer(reducer, initialTodos)
  
  return(
    // TodoStateContext가 제공하는 벨류는 상태이다. && TodoDispatchContext가 제공하는 벨류는 디스패치다.
    <TodoStateContext.Provider value={state}>
      <TodoDispatchContext.Provider value={dispatch}>
        {children}
      </TodoDispatchContext.Provider>
    </TodoStateContext.Provider>
  )
}

//5. 외부에서 사용할 수 있도록 export 해준다.
export{ TodoStateContext, TodoDispatchContext, TodoProvider}